"""
Automation Manager - Gerencia implementa√ß√£o de automa√ß√µes baseadas no diagn√≥stico
"""

import json
import datetime
from typing import Dict, List, Any
from dataclasses import dataclass
from data_processor import EmpresaProfile


@dataclass
class AutomacaoTask:
    id: str
    nome: str
    prioridade: int  # 1=alta, 2=m√©dia, 3=baixa
    prazo_dias: int
    status: str  # 'pendente', 'em_andamento', 'concluida'
    responsavel: str
    custo_estimado: float
    beneficio_mensal: float
    dependencias: List[str]
    checklist: List[Dict[str, bool]]


class AutomationManager:
    def __init__(self):
        self.status_tasks = {}
        self.templates_automacao = {
            "nfe_automation": self._template_nfe,
            "nfce_automation": self._template_nfce,
            "cte_automation": self._template_cte,
            "conciliacao_automation": self._template_conciliacao,
            "folha_automation": self._template_folha,
            "relatorios_automation": self._template_relatorios,
        }

    def _template_nfe(self):
        """Template para processamento de NFe"""
        return {
            "tipo": "NFe",
            "campos_obrigatorios": [
                "numero_nota",
                "serie",
                "cnpj_emitente",
                "cnpj_destinatario",
                "valor_total",
            ],
            "validacoes": ["verificar_cnpj", "calcular_tributos", "validar_xml"],
        }

    def _template_cte(self):
        """Template para processamento de CTe"""
        return {
            "tipo": "CTe",
            "campos_obrigatorios": ["numero_cte", "serie", "cnpj_emitente"],
            "validacoes": ["verificar_cnpj", "validar_frete"],
        }

    def criar_roadmap_automacao(self, profile: EmpresaProfile) -> List[AutomacaoTask]:
        """Cria roadmap completo de automa√ß√µes"""
        tasks = []

        for automacao in profile.automacoes_sugeridas:
            task = self._criar_task_automacao(automacao, profile)
            tasks.append(task)

        # Ordenar por prioridade e depend√™ncias
        return sorted(tasks, key=lambda x: (x.prioridade, x.prazo_dias))

        def _template_nfce(self, profile: EmpresaProfile) -> AutomacaoTask:
            """Template for NF-ce automation"""
            return AutomacaoTask(
                id="nfce_001",
                nome="Automa√ß√£o NF-ce",
                prioridade=2,
                prazo_dias=25,
                status="pendente",
                responsavel="Equipe Fiscal",
                custo_estimado=2200,
                beneficio_mensal=1800,
                dependencias=["sistema_erp", "api_nfce"],
                checklist=[
                    {"Mapear processo NF-ce": False},
                    {"Configurar API": False},
                    {"Desenvolver integra√ß√£o": False},
                    {"Testar": False},
                    {"Implantar": False},
                    {"Treinar equipe": False},
                ],
            )

    def _criar_task_automacao(
        self, automacao: str, profile: EmpresaProfile
    ) -> AutomacaoTask:
        """Cria task espec√≠fica para cada automa√ß√£o"""

        if "lan√ßamento de NF-e" in automacao:
            return AutomacaoTask(
                id="nfe_001",
                nome="Automa√ß√£o Lan√ßamento NF-e",
                prioridade=1,
                prazo_dias=30,
                status="pendente",
                responsavel="Equipe TI + Fiscal",
                custo_estimado=2500,
                beneficio_mensal=2000,
                dependencias=["sistema_erp", "api_nfe"],
                checklist=[
                    {"Mapear processo atual": False},
                    {"Configurar API NF-e": False},
                    {"Desenvolver integra√ß√£o": False},
                    {"Testar em homologa√ß√£o": False},
                    {"Implantar em produ√ß√£o": False},
                    {"Treinar equipe": False},
                ],
            )

        elif "concilia√ß√£o banc√°ria" in automacao:
            return AutomacaoTask(
                id="conc_001",
                nome="Automa√ß√£o Concilia√ß√£o Banc√°ria",
                prioridade=2,
                prazo_dias=20,
                status="pendente",
                responsavel="Equipe Cont√°bil",
                custo_estimado=1800,
                beneficio_mensal=1500,
                dependencias=["ofx_bancario", "sistema_erp"],
                checklist=[
                    {"Configurar OFX bancos": False},
                    {"Mapear plano de contas": False},
                    {"Desenvolver regras autom√°ticas": False},
                    {"Testar concilia√ß√£o": False},
                    {"Validar com contador": False},
                ],
            )

        elif "folha de pagamento" in automacao:
            return AutomacaoTask(
                id="folha_001",
                nome="Automa√ß√£o Folha de Pagamento",
                prioridade=1,
                prazo_dias=45,
                status="pendente",
                responsavel="Equipe RH + TI",
                custo_estimado=3500,
                beneficio_mensal=3000,
                dependencias=["sistema_rh", "esocial_api"],
                checklist=[
                    {"Mapear c√°lculos atuais": False},
                    {"Configurar par√¢metros": False},
                    {"Integrar com eSocial": False},
                    {"Testar c√°lculos": False},
                    {"Validar com RH": False},
                    {"Treinar operadores": False},
                ],
            )

        elif "relat√≥rios" in automacao:
            return AutomacaoTask(
                id="rel_001",
                nome="Automa√ß√£o Relat√≥rios Gerenciais",
                prioridade=3,
                prazo_dias=15,
                status="pendente",
                responsavel="Equipe BI",
                custo_estimado=1200,
                beneficio_mensal=1000,
                dependencias=["banco_dados", "bi_tool"],
                checklist=[
                    {"Definir KPIs": False},
                    {"Criar dashboards": False},
                    {"Automatizar extra√ß√£o": False},
                    {"Configurar envio": False},
                    {"Treinar gestores": False},
                ],
            )

        # Template gen√©rico
        return AutomacaoTask(
            id="gen_001",
            nome=automacao,
            prioridade=2,
            prazo_dias=30,
            status="pendente",
            responsavel="Equipe TI",
            custo_estimado=2000,
            beneficio_mensal=1500,
            dependencias=[],
            checklist=[
                {"An√°lise requisitos": False},
                {"Desenvolvimento": False},
                {"Testes": False},
                {"Implanta√ß√£o": False},
            ],
        )

    def gerar_cronograma_telegram(self, tasks: List[AutomacaoTask]) -> str:
        """Gera cronograma formatado para Telegram"""

        cronograma = f"""
üìÖ **CRONOGRAMA DE AUTOMA√á√ïES**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ **VIS√ÉO GERAL**
‚Ä¢ Total de automa√ß√µes: {len(tasks)}
‚Ä¢ Prazo total estimado: {max([t.prazo_dias for t in tasks]) if tasks else 0} dias
‚Ä¢ Investimento total: R$ {sum([t.custo_estimado for t in tasks]):,.2f}
‚Ä¢ Economia mensal: R$ {sum([t.beneficio_mensal for t in tasks]):,.2f}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã **CRONOGRAMA DETALHADO**

"""

        # Agrupar por prioridade
        alta_prioridade = [t for t in tasks if t.prioridade == 1]
        media_prioridade = [t for t in tasks if t.prioridade == 2]
        baixa_prioridade = [t for t in tasks if t.prioridade == 3]

        if alta_prioridade:
            cronograma += "üî• **ALTA PRIORIDADE** (Implementar primeiro)\n"
            for task in alta_prioridade:
                status_emoji = self._get_status_emoji(task.status)
                cronograma += f"""
{status_emoji} **{task.nome}**
   ‚è∞ Prazo: {task.prazo_dias} dias
   üë§ Respons√°vel: {task.responsavel}
   üí∞ Custo: R$ {task.custo_estimado:,.2f}
   üìà Benef√≠cio: R$ {task.beneficio_mensal:,.2f}/m√™s
   ‚úÖ Progresso: {self._calcular_progresso(task)}%

"""

        if media_prioridade:
            cronograma += "‚ö° **M√âDIA PRIORIDADE** (Segunda fase)\n"
            for task in media_prioridade:
                status_emoji = self._get_status_emoji(task.status)
                cronograma += f"""
{status_emoji} **{task.nome}**
   ‚è∞ {task.prazo_dias} dias | üí∞ R$ {task.custo_estimado:,.2f} | üìà R$ {task.beneficio_mensal:,.2f}/m√™s

"""

        if baixa_prioridade:
            cronograma += "üìä **BAIXA PRIORIDADE** (Otimiza√ß√µes)\n"
            for task in baixa_prioridade:
                status_emoji = self._get_status_emoji(task.status)
                cronograma += f"""
{status_emoji} **{task.nome}**
   ‚è∞ {task.prazo_dias} dias | üí∞ R$ {task.custo_estimado:,.2f}

"""

        cronograma += f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° **RECOMENDA√á√ïES**
1. üéØ Come√ßar pela alta prioridade
2. ‚öñÔ∏è Equilibrar carga da equipe
3. üìä Monitorar progresso semanal
4. üîÑ Ajustar prazos conforme necess√°rio

‚û°Ô∏è Para iniciar: /implementar [nome_automacao]
‚û°Ô∏è Ver detalhes: /detalhes [nome_automacao]
‚û°Ô∏è Status geral: /status

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ Cronograma atualizado: {datetime.datetime.now().strftime("%d/%m/%Y √†s %H:%M")}
"""

        return cronograma

    def acompanhar_progresso(self, task_id: str) -> Dict:
        """Acompanha progresso de uma automa√ß√£o espec√≠fica"""
        # Simula√ß√£o de acompanhamento
        return {
            "task_id": task_id,
            "progresso": 45,
            "etapa_atual": "Desenvolvimento",
            "bloqueios": [],
            "proximos_passos": ["Finalizar integra√ß√£o", "Iniciar testes"],
        }

    def _get_status_emoji(self, status: str) -> str:
        """Retorna emoji baseado no status"""
        emojis = {
            "pendente": "‚è≥",
            "em_andamento": "üîÑ",
            "concluida": "‚úÖ",
            "bloqueada": "üö´",
        }
        return emojis.get(status, "‚è≥")

    def _calcular_progresso(self, task: AutomacaoTask) -> int:
        """Calcula progresso baseado no checklist"""
        if not task.checklist:
            return 0

        concluidas = sum(1 for item in task.checklist if list(item.values())[0])
        total = len(task.checklist)

        return int((concluidas / total) * 100)


# Exemplo de uso
if __name__ == "__main__":
    from data_processor import EmpresaProfile

    # Exemplo de perfil
    profile = EmpresaProfile(
        nome="Exemplo Corp",
        regime_tributario="Simples Nacional",
        faturamento_mensal=150000,
        funcionarios=20,
        atividade_principal="Com√©rcio",
        problemas_identificados=["Processos manuais"],
        urgencias=[],
        automacoes_sugeridas=[
            "Automa√ß√£o de lan√ßamento de NF-e",
            "Automa√ß√£o da concilia√ß√£o banc√°ria",
            "Gera√ß√£o autom√°tica de relat√≥rios",
        ],
        score_organizacao=6,
    )

    manager = AutomationManager()
    tasks = manager.criar_roadmap_automacao(profile)
    cronograma = manager.gerar_cronograma_telegram(tasks)

    print(cronograma)
