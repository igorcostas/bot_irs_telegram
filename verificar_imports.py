"""
VERIFICA√á√ÉO DE IMPORTS - Checklist completo para o projeto
Execute este arquivo para verificar se todos os imports est√£o funcionando
"""

print("üîç VERIFICANDO IMPORTS DO PROJETO...")
print("=" * 60)

# Lista de verifica√ß√µes
verificacoes = []

print("\n1Ô∏è‚É£ VERIFICANDO IMPORTS B√ÅSICOS...")
try:
    import json
    import logging
    import datetime
    from typing import Dict, List, Any
    from dataclasses import dataclass
    print("‚úÖ Imports b√°sicos do Python: OK")
    verificacoes.append("‚úÖ Imports b√°sicos")
except ImportError as e:
    print(f"‚ùå Erro em imports b√°sicos: {e}")
    verificacoes.append("‚ùå Imports b√°sicos")

print("\n2Ô∏è‚É£ VERIFICANDO TELEGRAM BOT...")
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
    from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, ContextTypes, CallbackQueryHandler, filters
    print("‚úÖ python-telegram-bot: OK")
    verificacoes.append("‚úÖ Telegram Bot")
except ImportError as e:
    print(f"‚ùå Erro telegram bot: {e}")
    print("üí° Solu√ß√£o: pip install python-telegram-bot")
    verificacoes.append("‚ùå Telegram Bot")

print("\n3Ô∏è‚É£ VERIFICANDO OPENAI (PARA GROK)...")
try:
    from openai import OpenAI
    print("‚úÖ OpenAI (compat√≠vel com Grok): OK")
    verificacoes.append("‚úÖ OpenAI")
except ImportError as e:
    print(f"‚ùå Erro OpenAI: {e}")
    print("üí° Solu√ß√£o: pip install openai")
    verificacoes.append("‚ùå OpenAI")

print("\n4Ô∏è‚É£ VERIFICANDO PYTHON-DOTENV...")
try:
    from dotenv import load_dotenv
    import os
    print("‚úÖ python-dotenv: OK")
    verificacoes.append("‚úÖ python-dotenv")
except ImportError as e:
    print(f"‚ùå Erro python-dotenv: {e}")
    print("üí° Solu√ß√£o: pip install python-dotenv")
    verificacoes.append("‚ùå python-dotenv")

print("\n5Ô∏è‚É£ VERIFICANDO M√ìDULOS DO SEU PROJETO...")

# Verificar m√≥dulos existentes do projeto
modulos_projeto = [
    ("config", "Configura√ß√µes do bot"),
    ("prompts", "Prompts do sistema"),  
]

for modulo, descricao in modulos_projeto:
    try:
        __import__(modulo)
        print(f"‚úÖ {modulo}.py ({descricao}): OK")
        verificacoes.append(f"‚úÖ {modulo}.py")
    except ImportError as e:
        print(f"‚ùå {modulo}.py n√£o encontrado: {e}")
        verificacoes.append(f"‚ùå {modulo}.py")

print("\n6Ô∏è‚É£ VERIFICANDO M√ìDULOS LLM...")
try:
    # Tentar importar handler do Grok (estrutura do usu√°rio)
    from llm_handler.grok_handler import GrokHandler
    print("‚úÖ llm_handler/grok_handler.py: OK")
    verificacoes.append("‚úÖ GrokHandler")
except ImportError as e:
    print(f"‚ùå llm_handler/grok_handler.py: {e}")
    print("üí° Verifique se o arquivo existe na pasta llm_handler/")
    verificacoes.append("‚ùå GrokHandler")

print("\n7Ô∏è‚É£ VERIFICANDO NOVOS M√ìDULOS CRIADOS...")
novos_modulos = [
    ("data_processor", "DataProcessor, EmpresaProfile"),
    ("report_generator", "ReportGenerator"), 
    ("automation_manager", "AutomationManager"),
    ("main_integration", "PostAnalysisHandler")
]

for modulo, classes in novos_modulos:
    try:
        mod = __import__(modulo)
        print(f"‚úÖ {modulo}.py ({classes}): OK")
        verificacoes.append(f"‚úÖ {modulo}.py")
    except ImportError as e:
        print(f"‚ùå {modulo}.py n√£o encontrado: {e}")
        print(f"üí° Copie o arquivo {modulo}.py para a pasta do projeto")
        verificacoes.append(f"‚ùå {modulo}.py")

print("\n" + "=" * 60)
print("üìä RESUMO DA VERIFICA√á√ÉO:")
print("=" * 60)

sucessos = len([v for v in verificacoes if "‚úÖ" in v])
erros = len([v for v in verificacoes if "‚ùå" in v])

for verificacao in verificacoes:
    print(verificacao)

print(f"\nüéØ RESULTADO: {sucessos} OK | {erros} PROBLEMAS")

if erros == 0:
    print("\nüéâ PARAB√âNS! Todos os imports est√£o funcionando!")
    print("‚úÖ Seu projeto est√° pronto para executar!")
else:
    print(f"\n‚ö†Ô∏è Encontrados {erros} problemas que precisam ser resolvidos.")
    print("üìã Siga as solu√ß√µes indicadas acima.")

print("\n" + "=" * 60)
