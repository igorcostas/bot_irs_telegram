# Corrigir o arquivo com sintaxe correta
main_integration_code = '''"""
Main Integration - Integra todo o fluxo ap√≥s coleta das 20 perguntas
Adicione esta integra√ß√£o ao seu conversation_handler.py existente
"""
import json
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# Importar os novos m√≥dulos
from data_processor import DataProcessor, EmpresaProfile
from report_generator import ReportGenerator  
from automation_manager import AutomationManager

class PostAnalysisHandler:
    """Handler para processar dados ap√≥s as 20 perguntas"""
    
    def __init__(self):
        self.data_processor = DataProcessor()
        self.report_generator = ReportGenerator()
        self.automation_manager = AutomationManager()
        
    async def processar_respostas_completas(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa todas as respostas quando as 20 perguntas terminam"""
        
        user_id = update.effective_user.id
        
        # Recuperar respostas armazenadas (assumindo que est√£o em context.user_data)
        respostas = context.user_data.get('respostas_questionario', {})
        
        if len(respostas) < 20:
            await update.message.reply_text(
                "‚ö†Ô∏è Question√°rio incompleto! Faltam algumas respostas.\\n"
                "Digite /reset para recome√ßar."
            )
            return
        
        # Mostrar loading
        loading_msg = await update.message.reply_text(
            "ü§ñ **Analisando suas respostas...**\\n"
            "‚è≥ Processando dados empresariais...\\n" 
            "üìä Gerando diagn√≥stico...\\n"
            "üìã Criando plano de a√ß√£o..."
        )
        
        try:
            # 1. Processar dados
            profile = self.data_processor.processar_respostas(respostas)
            insights = self.data_processor.gerar_insights(profile)
            
            # 2. Salvar perfil para uso futuro
            context.user_data['empresa_profile'] = profile.__dict__
            context.user_data['insights'] = insights
            
            # 3. Deletar mensagem de loading
            await loading_msg.delete()
            
            # 4. Enviar relat√≥rio completo
            relatorio_completo = self.report_generator.gerar_relatorio_completo(profile, insights)
            
            # Dividir relat√≥rio se for muito longo (Telegram tem limite)
            if len(relatorio_completo) > 4000:
                partes = self._dividir_texto(relatorio_completo, 3800)
                for i, parte in enumerate(partes):
                    await update.message.reply_text(
                        parte, 
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    if i < len(partes) - 1:  # N√£o esperar na √∫ltima parte
                        import asyncio
                        await asyncio.sleep(1)  # Evitar rate limit
            else:
                await update.message.reply_text(
                    relatorio_completo,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
            
            # 5. Mostrar menu de op√ß√µes
            await self._mostrar_menu_pos_analise(update, context)
            
        except Exception as e:
            await loading_msg.delete()
            await update.message.reply_text(
                "‚ùå Erro ao processar dados. Tente novamente.\\n"
                f"Erro t√©cnico: {str(e)}"
            )
            logging.error(f"Erro no processamento: {e}")
    
    async def _mostrar_menu_pos_analise(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Mostra menu com op√ß√µes ap√≥s an√°lise"""
        
        keyboard = [
            [
                InlineKeyboardButton("üìã Ver Plano de A√ß√£o", callback_data="plano_acao"),
                InlineKeyboardButton("üìä Relat√≥rio Executivo", callback_data="relatorio_exec")
            ],
            [
                InlineKeyboardButton("ü§ñ Cronograma de Automa√ß√µes", callback_data="cronograma"),
                InlineKeyboardButton("üí∞ An√°lise Financeira", callback_data="analise_financeira")
            ],
            [
                InlineKeyboardButton("üöÄ Implementar Automa√ß√£o", callback_data="implementar"),
                InlineKeyboardButton("üìû Falar com Especialista", callback_data="contato")
            ],
            [
                InlineKeyboardButton("üîÑ Refazer Diagn√≥stico", callback_data="reset"),
                InlineKeyboardButton("üíæ Salvar Relat√≥rio", callback_data="salvar")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ **O que voc√™ gostaria de fazer agora?**\\n\\n"
            "Escolha uma op√ß√£o abaixo para continuar:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    def _dividir_texto(self, texto: str, max_length: int) -> list:
        """Divide texto em partes menores respeitando linhas"""
        if len(texto) <= max_length:
            return [texto]
        
        partes = []
        linhas = texto.split('\\n')
        parte_atual = ""
        
        for linha in linhas:
            if len(parte_atual + linha + '\\n') > max_length:
                if parte_atual:
                    partes.append(parte_atual)
                    parte_atual = linha + '\\n'
                else:
                    # Linha muito longa, for√ßar quebra
                    partes.append(linha[:max_length])
                    parte_atual = linha[max_length:] + '\\n'
            else:
                parte_atual += linha + '\\n'
        
        if parte_atual:
            partes.append(parte_atual)
        
        return partes

print("‚úÖ Main Integration module criado!")
'''

# Salvar arquivo
with open('main_integration.py', 'w', encoding='utf-8') as f:
    f.write(main_integration_code)

# Criar flashcard resumo
flashcard_content = '''
# üéØ FLASHCARD: PR√ìXIMOS PASSOS DO SEU BOT CONT√ÅBIL

## ‚úÖ SITUA√á√ÉO ATUAL
- ‚úÖ Bot Telegram funcionando com 20 perguntas
- ‚úÖ API Grok configurada e pagando
- ‚úÖ Coletando dados das empresas

## üöÄ NOVOS M√ìDULOS CRIADOS
1. **data_processor.py** - Analisa e processa as respostas das 20 perguntas
2. **report_generator.py** - Gera relat√≥rios formatados para Telegram  
3. **automation_manager.py** - Cria cronogramas de automa√ß√£o
4. **main_integration.py** - Integra tudo ao seu bot existente

## üîß INTEGRA√á√ÉO NECESS√ÅRIA
### No seu conversation_handler.py, adicione:

```python
from main_integration import PostAnalysisHandler

# No __init__ da sua classe:
self.post_analysis = PostAnalysisHandler()

# Quando terminar as 20 perguntas, chame:
await self.post_analysis.processar_respostas_completas(update, context)
```

## üìã O QUE ACONTECE AGORA AP√ìS AS 20 PERGUNTAS:

1. **ü§ñ PROCESSAMENTO AUTOM√ÅTICO**
   - Analisa perfil da empresa
   - Calcula score de organiza√ß√£o
   - Identifica problemas e urg√™ncias
   - Sugere automa√ß√µes personalizadas

2. **üìä RELAT√ìRIOS GERADOS**
   - Diagn√≥stico completo
   - Plano de a√ß√£o com cronograma
   - An√°lise financeira (ROI, payback)
   - Relat√≥rio executivo

3. **üéÆ MENU INTERATIVO**
   - Bot√µes para diferentes relat√≥rios  
   - Cronograma de implementa√ß√£o
   - Contato com especialista
   - Sistema de callbacks

## üí∞ VALOR AGREGADO
- ‚ùå Antes: S√≥ respondia perguntas b√°sicas
- ‚úÖ Agora: Consultor virtual completo!

## ‚ö° PR√ìXIMA A√á√ÉO IMEDIATA
1. Copie os 4 novos arquivos para sua pasta
2. Integre no conversation_handler.py  
3. Teste com um question√°rio completo
4. Ajuste prompts se necess√°rio

## üéØ RESULTADO FINAL
Seu bot vira um **T√âCNICO CONT√ÅBIL VIRTUAL** que:
- ‚úÖ Diagnostica empresas
- ‚úÖ Cria planos de automa√ß√£o  
- ‚úÖ Calcula ROI e economia
- ‚úÖ Orienta implementa√ß√£o passo a passo
'''

# Salvar flashcard
with open('FLASHCARD_PROXIMOS_PASSOS.md', 'w', encoding='utf-8') as f:
    f.write(flashcard_content)

print("‚úÖ main_integration.py criado com sucesso!")
print("‚úÖ FLASHCARD_PROXIMOS_PASSOS.md criado!")
print("\n" + "="*50)
print("üéØ RESUMO DOS ARQUIVOS CRIADOS:")
print("="*50)
print("1. data_processor.py - Processa dados das 20 perguntas")
print("2. report_generator.py - Gera relat√≥rios formatados")  
print("3. automation_manager.py - Cronograma de automa√ß√µes")
print("4. main_integration.py - Integra com seu bot")
print("5. FLASHCARD_PROXIMOS_PASSOS.md - Guia de implementa√ß√£o")
print("\nüöÄ Pr√≥ximo passo: Integrar no seu conversation_handler.py")