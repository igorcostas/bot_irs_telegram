"""
Report Generator - Gera relat√≥rios personalizados baseados no perfil da empresa
"""

import json
import datetime
from typing import Dict, List, Any
from data_processor import EmpresaProfile, DataProcessor


class ReportGenerator:
    def __init__(self):
        self.templates = {
            "diagnostico": self._template_diagnostico,
            "plano_acao": self._template_plano_acao,
            "relatorio_executivo": self._template_executivo,
            "proposta_automacao": self._template_proposta,
        }

    def gerar_relatorio_completo(self, profile: EmpresaProfile, insights: Dict) -> str:
        """Gera relat√≥rio completo para o Telegram"""
        relatorio = f"""üè¢ **DIAGN√ìSTICO EMPRESARIAL COMPLETO**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä **DADOS DA EMPRESA**
‚Ä¢ Nome: {profile.nome}
‚Ä¢ Regime Tribut√°rio: {profile.regime_tributario}
‚Ä¢ Faturamento Mensal: R$ {profile.faturamento_mensal:,.2f}
‚Ä¢ Funcion√°rios: {profile.funcionarios}
‚Ä¢ Atividade: {profile.atividade_principal}
‚Ä¢ Score Organiza√ß√£o: {profile.score_organizacao}/10 {"üü¢" if profile.score_organizacao >= 7 else "üü°" if profile.score_organizacao >= 5 else "üî¥"}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üö® **PROBLEMAS IDENTIFICADOS**
"""

        if profile.problemas_identificados:
            for i, problema in enumerate(profile.problemas_identificados, 1):
                relatorio += f"{i}. ‚ùå {problema}\n"
        else:
            relatorio += "‚úÖ Nenhum problema cr√≠tico identificado\n"

        relatorio += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° **URG√äNCIAS** (A√ß√£o Imediata)
"""

        if profile.urgencias:
            for i, urgencia in enumerate(profile.urgencias, 1):
                relatorio += f"{i}. üî• {urgencia}\n"
        else:
            relatorio += "‚úÖ Nenhuma urg√™ncia identificada\n"

        relatorio += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü§ñ **AUTOMA√á√ïES RECOMENDADAS**
"""

        if profile.automacoes_sugeridas:
            for i, automacao in enumerate(profile.automacoes_sugeridas, 1):
                relatorio += f"{i}. ‚öôÔ∏è {automacao}\n"
        else:
            relatorio += "‚ÑπÔ∏è Nenhuma automa√ß√£o priorit√°ria identificada\n"

        # Adicionar insights de economia
        if insights["economia_estimada"] > 0:
            relatorio += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ **IMPACTO FINANCEIRO ESTIMADO**
‚Ä¢ Economia mensal: R$ {insights["economia_estimada"]:,.2f}
‚Ä¢ Tempo economizado: {insights["tempo_economizado"]}h/m√™s
‚Ä¢ ROI estimado: {self._calcular_roi(insights["economia_estimada"])}

"""

        # Prioridades
        relatorio += f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ **PR√ìXIMOS PASSOS PRIORIT√ÅRIOS**
"""

        for i, prioridade in enumerate(insights["prioridades"], 1):
            relatorio += f"{i}. üìå {prioridade}\n"

        # Recomenda√ß√µes
        if insights["recomendacoes"]:
            relatorio += f"""
üí° **RECOMENDA√á√ïES ESTRAT√âGICAS**
"""
            for i, rec in enumerate(insights["recomendacoes"], 1):
                relatorio += f"{i}. üí≠ {rec}\n"

        relatorio += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ Relat√≥rio gerado em: {datetime.datetime.now().strftime("%d/%m/%Y √†s %H:%M")}
ü§ñ Assistente: Maria - T√©cnica Cont√°bil Virtual

‚û°Ô∏è **QUER IMPLEMENTAR ALGUMA AUTOMA√á√ÉO?**
Digite /plano para ver o plano de a√ß√£o detalhado!
"""

        return relatorio

    def gerar_plano_acao(self, profile: EmpresaProfile, insights: Dict) -> str:
        """Gera plano de a√ß√£o espec√≠fico"""

        plano = f"""üìã **PLANO DE A√á√ÉO - {profile.nome}**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ **OBJETIVO**: Automatizar processos e otimizar opera√ß√µes

üìä **SITUA√á√ÉO ATUAL**
‚Ä¢ Score Organiza√ß√£o: {profile.score_organizacao}/10
‚Ä¢ Problemas ativos: {len(profile.problemas_identificados)}
‚Ä¢ Urg√™ncias: {len(profile.urgencias)}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ **CRONOGRAMA DE IMPLEMENTA√á√ÉO**

**üî• FASE 1 - URG√äNCIAS (0-15 dias)**
"""

        if profile.urgencias:
            for i, urgencia in enumerate(profile.urgencias, 1):
                prazo, acao = self._definir_acao_urgencia(urgencia)
                plano += f"""
{i}. {urgencia}
   ‚è∞ Prazo: {prazo}
   üìù A√ß√£o: {acao}
"""
        else:
            plano += "‚úÖ Nenhuma urg√™ncia identificada\n"

        plano += f"""
**‚ö° FASE 2 - AUTOMA√á√ïES R√ÅPIDAS (15-45 dias)**
"""

        automacoes_rapidas = [
            auto
            for auto in profile.automacoes_sugeridas
            if "relat√≥rio" in auto or "concilia√ß√£o" in auto
        ][:2]

        for i, auto in enumerate(automacoes_rapidas, 1):
            prazo, custo, beneficio = self._definir_detalhes_automacao(auto)
            plano += f"""
{i}. {auto}
   ‚è∞ Prazo: {prazo}
   üí∞ Custo estimado: {custo}
   üìà Benef√≠cio: {beneficio}
"""

        plano += f"""
**üèóÔ∏è FASE 3 - AUTOMA√á√ïES COMPLEXAS (45-90 dias)**
"""

        automacoes_complexas = [
            auto
            for auto in profile.automacoes_sugeridas
            if auto not in automacoes_rapidas
        ]

        for i, auto in enumerate(automacoes_complexas, 1):
            prazo, custo, beneficio = self._definir_detalhes_automacao(auto)
            plano += f"""
{i}. {auto}
   ‚è∞ Prazo: {prazo}
   üí∞ Custo estimado: {custo}
   üìà Benef√≠cio: {beneficio}
"""

        # Resumo financeiro
        plano += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ **RESUMO FINANCEIRO**
‚Ä¢ Investimento total: R$ {self._calcular_investimento_total(profile):,.2f}
‚Ä¢ Economia mensal: R$ {insights["economia_estimada"]:,.2f}
‚Ä¢ Retorno em: {self._calcular_payback(insights["economia_estimada"], profile)} meses
‚Ä¢ Tempo economizado: {insights["tempo_economizado"]}h/m√™s

üéØ **METAS DE RESULTADO**
‚Ä¢ Reduzir processos manuais em 80%
‚Ä¢ Aumentar produtividade em 60%
‚Ä¢ Eliminar atrasos fiscais em 100%
‚Ä¢ Score organiza√ß√£o target: 9/10

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ Plano criado em: {datetime.datetime.now().strftime("%d/%m/%Y")}

‚û°Ô∏è **PR√ìXIMO PASSO**: Digite /implementar para come√ßar!
"""

        return plano

    def gerar_relatorio_executivo(self, profile: EmpresaProfile, insights: Dict) -> str:
        """Gera relat√≥rio executivo resumido"""

        return f"""üëî **RELAT√ìRIO EXECUTIVO**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä **DIAGN√ìSTICO**: {profile.nome}

**üéØ OPORTUNIDADE IDENTIFICADA**
Implementa√ß√£o de automa√ß√µes pode economizar R$ {insights["economia_estimada"]:,.2f}/m√™s e {insights["tempo_economizado"]}h de trabalho.

**üìà POTENCIAL DE MELHORIA**
‚Ä¢ Atual: {profile.score_organizacao}/10
‚Ä¢ Target: 9/10
‚Ä¢ Melhoria: {9 - profile.score_organizacao} pontos

**üí° RECOMENDA√á√ÉO PRINCIPAL**
{insights["prioridades"][0] if insights["prioridades"] else "Manter processos atuais"}

**‚ö° A√á√ÉO IMEDIATA**
{profile.urgencias[0] if profile.urgencias else "Planejar implementa√ß√£o gradual"}

**üí∞ ROI PROJETADO**
{self._calcular_roi(insights["economia_estimada"])} em {self._calcular_payback(insights["economia_estimada"], profile)} meses

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Para relat√≥rio completo: /relatorio
"""

    def _calcular_roi(self, economia_mensal: float) -> str:
        """Calcula ROI estimado"""
        if economia_mensal > 5000:
            return "ROI Alto (>300%)"
        elif economia_mensal > 2000:
            return "ROI M√©dio (150-300%)"
        else:
            return "ROI Baixo (<150%)"

    def _calcular_payback(self, economia_mensal: float, profile: EmpresaProfile) -> int:
        """Calcula payback em meses"""
        investimento = self._calcular_investimento_total(profile)
        if economia_mensal > 0:
            return max(1, int(investimento / economia_mensal))
        return 12

    def _calcular_investimento_total(self, profile: EmpresaProfile) -> float:
        """Estima investimento total"""
        base = 5000  # Custo base
        if profile.funcionarios > 20:
            base *= 1.5
        if profile.faturamento_mensal > 200000:
            base *= 1.3
        return base

    def _definir_acao_urgencia(self, urgencia: str) -> tuple:
        """Define a√ß√£o espec√≠fica para urg√™ncia"""
        acoes = {
            "ECF com prazo pr√≥ximo": (
                "3 dias",
                "Organizar documentos e transmitir ECF",
            ),
            "SPED Fiscal pendente": ("7 dias", "Revisar movimenta√ß√£o e enviar SPED"),
            "Folha de pagamento em atraso": (
                "2 dias",
                "Processar e enviar folha urgentemente",
            ),
        }
        return acoes.get(urgencia, ("7 dias", "A√ß√£o corretiva imediata"))

    def _definir_detalhes_automacao(self, automacao: str) -> tuple:
        """Define detalhes de cada automa√ß√£o"""
        detalhes = {
            "Automa√ß√£o de lan√ßamento de NF-e": (
                "30 dias",
                "R$ 2.000",
                "40h/m√™s economizadas",
            ),
            "Automa√ß√£o da concilia√ß√£o banc√°ria": (
                "20 dias",
                "R$ 1.500",
                "20h/m√™s economizadas",
            ),
            "Automa√ß√£o da folha de pagamento": (
                "45 dias",
                "R$ 3.000",
                "30h/m√™s economizadas",
            ),
            "Gera√ß√£o autom√°tica de relat√≥rios": (
                "15 dias",
                "R$ 1.000",
                "15h/m√™s economizadas",
            ),
        }
        return detalhes.get(automacao, ("30 dias", "R$ 1.500", "10h/m√™s economizadas"))

    def _template_diagnostico(self):
        pass

    def _template_plano_acao(self):
        pass

    def _template_executivo(self):
        pass

    def _template_proposta(self):
        pass
