"""
Conversation Handler - Bot IRS Portugal com Marinete
Sistema de simula√ß√£o de IRS com 20 perguntas interativas
"""

import logging
from typing import Dict, Any
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# Importar handler LLM
from llm_handler.groq_handler import GroqHandler

# Importar sistemas de monitoramento e sugest√µes
from monitoring import monitoring
from suggestions import suggestion_manager

# Importar prompts e perguntas
from prompts import (
    WELCOME_MESSAGE,
    SIMULATION_PROMPT,
    DEDUCTIONS_INFO,
    HELP_MESSAGE,
    PERGUNTAS_IRS,
    SYSTEM_PROMPT,
)

# Estados da conversa√ß√£o (20 perguntas + estados auxiliares)
(
    MENU_PRINCIPAL,
    PERGUNTA_1,
    PERGUNTA_2,
    PERGUNTA_3,
    PERGUNTA_4,
    PERGUNTA_5,
    PERGUNTA_6,
    PERGUNTA_7,
    PERGUNTA_8,
    PERGUNTA_9,
    PERGUNTA_10,
    PERGUNTA_11,
    PERGUNTA_12,
    PERGUNTA_13,
    PERGUNTA_14,
    PERGUNTA_15,
    PERGUNTA_16,
    PERGUNTA_17,
    PERGUNTA_18,
    PERGUNTA_19,
    PERGUNTA_20,
    PROCESSANDO_RESULTADO,
    CALCULO_RAPIDO,
    AGUARDANDO_SUGESTAO,
) = range(24)

# Configurar logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.FileHandler("bot_contabil.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class IRSBotHandler:
    """Handler principal para o bot IRS Portugal com Marinete"""

    def __init__(self):
        self.groq = GroqHandler()
        logger.info("‚úÖ IRSBotHandler inicializado com Marinete")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /start - Boas-vindas"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar usu√°rio e atividade no sistema de monitoramento
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/start")

        # Limpar dados anteriores e inicializar estrutura
        context.user_data.clear()
        context.user_data["respostas_irs"] = {}
        context.user_data["pergunta_atual"] = 0

        logger.info(f"Usu√°rio {user.id} ({user.first_name}) iniciou o bot")

        await update.message.reply_text(
            WELCOME_MESSAGE,
            parse_mode="Markdown",
        )

        return ConversationHandler.END

    async def simular(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /simular - Inicia simula√ß√£o completa de IRS"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar usu√°rio e atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/simular")

        # Limpar dados anteriores e iniciar novo question√°rio
        context.user_data.clear()
        context.user_data["respostas_irs"] = {}
        context.user_data["pergunta_atual"] = 0

        logger.info(f"Usu√°rio {user.id} iniciou simula√ß√£o de IRS")

        await update.message.reply_text(
            SIMULATION_PROMPT,
            parse_mode="Markdown",
        )

        # Enviar primeira pergunta
        return await self._enviar_pergunta(update, context, 0)

    async def _enviar_pergunta(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, numero_pergunta: int
    ) -> int:
        """Envia uma pergunta espec√≠fica do question√°rio"""

        if numero_pergunta >= len(PERGUNTAS_IRS):
            # Terminou as perguntas
            return await self.finalizar_questionario(update, context)

        pergunta_data = PERGUNTAS_IRS[numero_pergunta]

        # Criar teclado se houver op√ß√µes
        reply_markup = None
        if "opcoes" in pergunta_data and pergunta_data["opcoes"]:
            keyboard = [[KeyboardButton(opcao)] for opcao in pergunta_data["opcoes"]]
            reply_markup = ReplyKeyboardMarkup(
                keyboard, one_time_keyboard=True, resize_keyboard=True
            )

        # Montar mensagem
        mensagem = f"**Pergunta {numero_pergunta + 1}/20**\n\n"
        mensagem += pergunta_data["pergunta"]

        if "dica" in pergunta_data:
            mensagem += f"\n\nüí° _Dica: {pergunta_data['dica']}_"

        await update.message.reply_text(
            mensagem,
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )

        # Retornar estado correspondente √† pergunta
        return PERGUNTA_1 + numero_pergunta

    async def processar_resposta(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Processa resposta de uma pergunta e avan√ßa para a pr√≥xima"""

        # Verificar se o question√°rio foi iniciado corretamente
        if "respostas_irs" not in context.user_data:
            await update.message.reply_text(
                "‚ö†Ô∏è Por favor, inicie a simula√ß√£o com o comando /simular primeiro."
            )
            return ConversationHandler.END

        pergunta_atual = context.user_data.get("pergunta_atual", 0)
        resposta = update.message.text

        # Validar e salvar resposta
        pergunta_data = PERGUNTAS_IRS[pergunta_atual]
        chave = pergunta_data["chave"]

        context.user_data["respostas_irs"][chave] = resposta

        logger.info(f"Resposta {pergunta_atual + 1}: {chave} = {resposta}")

        # Avan√ßar para pr√≥xima pergunta
        pergunta_atual += 1
        context.user_data["pergunta_atual"] = pergunta_atual

        # Verificar se terminaram as perguntas
        if pergunta_atual >= len(PERGUNTAS_IRS):
            return await self.finalizar_questionario(update, context)

        # Enviar pr√≥xima pergunta
        await update.message.reply_text(
            "‚úÖ Resposta registada!",
            reply_markup=ReplyKeyboardRemove(),
        )

        return await self._enviar_pergunta(update, context, pergunta_atual)

    async def finalizar_questionario(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Finaliza question√°rio e processa c√°lculo de IRS"""

        await update.message.reply_text(
            "‚úÖ **Question√°rio conclu√≠do!**\n\n"
            "ü§ñ Agora vou analisar as tuas respostas e calcular o teu IRS...",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown",
        )

        # Processar com LLM
        respostas = context.user_data.get("respostas_irs", {})

        try:
            # Criar prompt para an√°lise
            prompt_analise = self._criar_prompt_analise(respostas)

            # Gerar an√°lise com Groq
            resultado = self.groq.generate_response_sync(
                user_message=prompt_analise, system_prompt=SYSTEM_PROMPT
            )

            # Registrar simula√ß√£o completada para m√©tricas
            monitoring.register_simulation_completion(update.effective_user.id)

            # Enviar resultado
            await update.message.reply_text(
                resultado,
                parse_mode="Markdown",
            )

            # Oferecer op√ß√µes
            await update.message.reply_text(
                "\nüìä **O que desejas fazer agora?**\n\n"
                "‚Ä¢ `/simular` - Nova simula√ß√£o\n"
                "‚Ä¢ `/deducoes` - Ver dedu√ß√µes dispon√≠veis\n"
                "‚Ä¢ `/ajuda` - Ver outros comandos\n\n"
                "Ou faz-me outra pergunta! üòä",
                parse_mode="Markdown",
            )

        except Exception as e:
            logger.error(f"Erro ao processar resultado: {e}")
            await update.message.reply_text(
                f"‚ùå Erro ao processar dados. Tenta novamente.\n"
                f"Erro t√©cnico: {str(e)}\n\n"
                f"Usa `/reset` para recome√ßar.",
            )

        return ConversationHandler.END

    def _criar_prompt_analise(self, respostas: Dict[str, Any]) -> str:
        """Cria prompt para an√°lise das respostas"""

        prompt = "Com base nas seguintes informa√ß√µes, calcula e explica o IRS:\n\n"

        for i, pergunta in enumerate(PERGUNTAS_IRS):
            chave = pergunta["chave"]
            resposta = respostas.get(chave, "N√£o informado")
            prompt += f"{i + 1}. {pergunta['pergunta']}\n   Resposta: {resposta}\n\n"

        prompt += """
Por favor, fornece:

1. **üí∞ C√ÅLCULO DETALHADO DO IRS:**
   - Rendimento colet√°vel
   - Escal√£o aplic√°vel e taxa
   - Valor de IRS a pagar/receber
   - Impacto das dedu√ß√µes

2. **üìä COMPARA√á√ÉO (se aplic√°vel):**
   - Tributa√ß√£o individual vs conjunta
   - Qual compensa mais e porqu√™

3. **üí° SUGEST√ïES DE OTIMIZA√á√ÉO:**
   - Como reduzir o IRS legalmente
   - Dedu√ß√µes que pode aproveitar melhor
   - Benef√≠cios fiscais dispon√≠veis

4. **üéØ PR√ìXIMOS PASSOS:**
   - Quando e como entregar a declara√ß√£o
   - Documentos necess√°rios
   - Prazos importantes

Formata de forma clara, com emojis e se√ß√µes bem definidas. Lembra-te: √©s a Marinete, fala de forma natural e emp√°tica!
"""

        return prompt

    async def calcular_rapido(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Comando /calcular - C√°lculo r√°pido de IRS"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar usu√°rio e atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/calcular")

        texto = update.message.text.replace("/calcular", "").strip()

        if not texto:
            await update.message.reply_text(
                "‚ö° **C√°lculo R√°pido de IRS**\n\n"
                "Usa assim:\n"
                "`/calcular 30000`\n"
                "ou\n"
                "`/calcular 30000 saude:500 educacao:300`\n\n"
                "Valores em euros (‚Ç¨)",
                parse_mode="Markdown",
            )
            return ConversationHandler.END

        try:
            # Processar entrada
            prompt = f"""
Faz um c√°lculo r√°pido de IRS para: {texto}

Considera:
- Trabalhador dependente, solteiro, sem dependentes
- Rendimento e dedu√ß√µes fornecidos
- Portugal Continental, 2024

Mostra:
1. Rendimento colet√°vel
2. Escal√£o e taxa
3. IRS a pagar/receber (estimativa)
4. Breve explica√ß√£o

S√™ breve e direto! M√°ximo 10 linhas.
"""

            resultado = self.groq.generate_response_sync(
                user_message=prompt, system_prompt=SYSTEM_PROMPT
            )

            await update.message.reply_text(
                f"‚ö° **C√°lculo R√°pido:**\n\n{resultado}\n\n"
                f"üí° Para simula√ß√£o detalhada, usa `/simular`",
                parse_mode="Markdown",
            )

        except Exception as e:
            logger.error(f"Erro no c√°lculo r√°pido: {e}")
            await update.message.reply_text(
                f"‚ùå Erro no c√°lculo. Verifica o formato!\nExemplo: `/calcular 30000`"
            )

        return ConversationHandler.END

    async def deducoes(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /deducoes - Mostra informa√ß√µes sobre dedu√ß√µes"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/deducoes")

        await update.message.reply_text(
            DEDUCTIONS_INFO,
            parse_mode="Markdown",
        )

        return ConversationHandler.END

    async def ajuda(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /ajuda - Mostra ajuda"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/ajuda")

        await update.message.reply_text(
            HELP_MESSAGE,
            parse_mode="Markdown",
        )

        return ConversationHandler.END

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /reset - Reinicia o bot"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_activity(user.id, "command", "/reset")

        context.user_data.clear()

        await update.message.reply_text(
            "üîÑ Dados limpos!\n\n"
            "Usa `/start` para come√ßar de novo ou `/simular` para nova simula√ß√£o.",
            reply_markup=ReplyKeyboardRemove(),
        )

        return ConversationHandler.END

    async def cancelar(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /cancel - Cancela opera√ß√£o atual"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_activity(user.id, "command", "/cancel")

        await update.message.reply_text(
            "‚ùå Opera√ß√£o cancelada.\n\n"
            "Usa `/start` para ver op√ß√µes ou `/simular` para nova simula√ß√£o.",
            reply_markup=ReplyKeyboardRemove(),
        )

        return ConversationHandler.END

    async def sugestoes(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Comando /sugestoes - Permite ao usu√°rio enviar sugest√£o"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar usu√°rio e atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/sugestoes")

        # Verificar se pode enviar sugest√£o (cooldown)
        can_suggest, error_msg = suggestion_manager.can_user_suggest(user.id)

        if not can_suggest:
            await update.message.reply_text(
                f"‚è∞ **Aguarda um pouco**\n\n{error_msg}",
                parse_mode="Markdown",
            )
            return ConversationHandler.END

        # Pedir sugest√£o
        await update.message.reply_text(
            "üí° **Envia a tua sugest√£o!**\n\n"
            "Podes sugerir melhorias, novas funcionalidades, "
            "reportar problemas ou dar feedback geral.\n\n"
            "üìù Escreve a tua sugest√£o na pr√≥xima mensagem:",
            parse_mode="Markdown",
        )

        return AGUARDANDO_SUGESTAO

    async def processar_sugestao(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Processa a sugest√£o enviada pelo usu√°rio"""
        user = update.effective_user
        if not user or not update.message or not update.message.text:
            return ConversationHandler.END

        suggestion_text = update.message.text

        # Registrar a sugest√£o
        success, message = suggestion_manager.add_suggestion(
            user_id=user.id,
            suggestion_text=suggestion_text,
            username=user.username or "",
            first_name=user.first_name or "",
        )

        if success:
            await update.message.reply_text(
                f"‚úÖ **Sugest√£o recebida!**\n\n"
                f"{message}\n\n"
                f"üôè Obrigado pelo teu feedback! A tua sugest√£o ser√° analisada.",
                parse_mode="Markdown",
            )
        else:
            await update.message.reply_text(
                f"‚ùå **Erro ao enviar sugest√£o**\n\n{message}",
                parse_mode="Markdown",
            )

        return ConversationHandler.END

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /stats - Mostra estat√≠sticas do bot (admin)"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Lista de IDs de administradores - Henrick (user ID 1378607128)
        admin_ids = [1378607128]  # Henrick - Admin do bot

        if user.id not in admin_ids:
            await update.message.reply_text("‚ùå Comando apenas para administradores.")
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_activity(user.id, "command", "/stats")

        try:
            # Gerar relat√≥rio de showcase para clientes
            showcase_report = monitoring.generate_showcase_report()

            # Gerar relat√≥rio de sugest√µes
            suggestions_report = suggestion_manager.generate_suggestions_report()

            # Enviar relat√≥rio de showcase (dividido se muito longo)
            if len(showcase_report) > 4000:
                # Dividir em partes
                parts = [
                    showcase_report[i : i + 4000]
                    for i in range(0, len(showcase_report), 4000)
                ]
                for i, part in enumerate(parts):
                    await update.message.reply_text(
                        f"**PARTE {i + 1}/{len(parts)}**\n\n{part}",
                        parse_mode="Markdown",
                    )
            else:
                await update.message.reply_text(
                    showcase_report,
                    parse_mode="Markdown",
                )

            # Enviar relat√≥rio de sugest√µes separadamente
            await update.message.reply_text(
                suggestions_report,
                parse_mode="Markdown",
            )

        except Exception as e:
            logger.error(f"Erro ao gerar estat√≠sticas: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao gerar relat√≥rio de estat√≠sticas.",
            )

        return ConversationHandler.END

    async def showcase_detalhado(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Comando /showcase_detalhado - Relat√≥rio t√©cnico completo para clientes (admin apenas)"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Restrito apenas para Henrick (user ID 1378607128)
        if user.id != 1378607128:
            await update.message.reply_text("‚ùå Comando apenas para administradores.")
            return ConversationHandler.END

        # Registrar atividade
        monitoring.register_activity(user.id, "command", "/showcase_detalhado")

        try:
            # Gerar relat√≥rio t√©cnico completo
            stats_report = monitoring.generate_stats_report()
            showcase_report = monitoring.generate_showcase_report()
            suggestions_report = suggestion_manager.generate_suggestions_report()

            # Cabe√ßalho do relat√≥rio t√©cnico
            technical_header = """üî¨ **RELAT√ìRIO T√âCNICO DETALHADO**
_An√°lise Completa para Demonstra√ß√£o T√©cnica_

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"""

            # Enviar relat√≥rio t√©cnico completo
            await update.message.reply_text(
                technical_header,
                parse_mode="Markdown",
            )

            # Enviar showcase report
            if len(showcase_report) > 4000:
                parts = [
                    showcase_report[i : i + 4000]
                    for i in range(0, len(showcase_report), 4000)
                ]
                for i, part in enumerate(parts, 1):
                    await update.message.reply_text(
                        f"**SHOWCASE PART {i}:**\n\n{part}",
                        parse_mode="Markdown",
                    )
            else:
                await update.message.reply_text(showcase_report, parse_mode="Markdown")

            # Separador
            await update.message.reply_text(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )

            # Enviar stats t√©cnicas
            if len(stats_report) > 4000:
                parts = [
                    stats_report[i : i + 4000]
                    for i in range(0, len(stats_report), 4000)
                ]
                for i, part in enumerate(parts, 1):
                    await update.message.reply_text(
                        f"**STATS T√âCNICAS PART {i}:**\n\n{part}",
                        parse_mode="Markdown",
                    )
            else:
                await update.message.reply_text(stats_report, parse_mode="Markdown")

            # Separador
            await update.message.reply_text(
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
            )

            # Enviar relat√≥rio de sugest√µes
            await update.message.reply_text(suggestions_report, parse_mode="Markdown")

            # Footer t√©cnico
            footer = """
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üéØ **CAPACIDADES T√âCNICAS DEMONSTRADAS:**

‚úÖ Monitoramento em tempo real
‚úÖ An√°lise de padr√µes de uso
‚úÖ Sistema de feedback integrado
‚úÖ M√©tricas de performance
‚úÖ Relat√≥rios automatizados
‚úÖ Escalabilidade comprovada

üìä _Relat√≥rio gerado automaticamente pelo sistema de monitoramento_
"""
            await update.message.reply_text(footer, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"Erro ao gerar showcase detalhado: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao gerar relat√≥rio t√©cnico detalhado.",
            )

        return ConversationHandler.END

    async def contato(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Comando /contato - Informa√ß√µes para contratar servi√ßos de bot personalizado"""
        user = update.effective_user
        if not user:
            return ConversationHandler.END

        # Registrar usu√°rio e atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "command", "/contato")

        contact_message = """
ü§ñ **BOT PERSONALIZADO PARA SEU NEG√ìCIO**

üíº **VALOR PARA SUA EMPRESA:**
‚Ä¢ ‚úÖ **Automatiza√ß√£o 24/7** - Atendimento cont√≠nuo aos clientes
‚Ä¢ ‚úÖ **Redu√ß√£o de custos** - Diminui carga da equipe de suporte
‚Ä¢ ‚úÖ **Experi√™ncia premium** - Clientes satisfeitos e engajados
‚Ä¢ ‚úÖ **An√°lise inteligente** - Dados e insights em tempo real
‚Ä¢ ‚úÖ **Escalabilidade total** - Atende milhares simultaneamente
‚Ä¢ ‚úÖ **ROI comprovado** - Retorno r√°pido do investimento

üéØ **SOLU√á√ïES PERSONALIZADAS:**
‚Ä¢ üìä Bots para contabilidade e consultoria fiscal
‚Ä¢ üè• Assistentes virtuais para cl√≠nicas e hospitais
‚Ä¢ üè¢ Automa√ß√£o de atendimento empresarial
‚Ä¢ üìö Sistemas educacionais interativos
‚Ä¢ üõçÔ∏è E-commerce e vendas automatizadas
‚Ä¢ ‚öñÔ∏è Consultoria jur√≠dica inteligente

üöÄ **TECNOLOGIA DE PONTA:**
‚Ä¢ üß† Intelig√™ncia Artificial avan√ßada (Groq/OpenAI)
‚Ä¢ üì± Integra√ß√£o completa com Telegram
‚Ä¢ üìä Sistema de monitoramento e an√°lise
‚Ä¢ üîí Seguran√ßa e privacidade garantidas
‚Ä¢ üõ†Ô∏è Manuten√ß√£o e suporte cont√≠nuo

üí∞ **INVESTIMENTO ACESS√çVEL:**
‚Ä¢ Pre√ßos competitivos
‚Ä¢ Pagamento facilitado
‚Ä¢ Retorno r√°pido garantido

üìû **ENTRE EM CONTATO AGORA:**
üë®‚Äçüíº **Administrador:** @bgtfx8

üí¨ **Vamos conversar sobre seu projeto!**
_An√°lise gratuita das suas necessidades_
_Proposta personalizada sem compromisso_

üéÅ **OFERTA ESPECIAL:** Demonstra√ß√£o gratuita do seu bot personalizado!
"""

        await update.message.reply_text(
            contact_message,
            parse_mode="Markdown",
        )

        return ConversationHandler.END

    async def mensagem_livre(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> int:
        """Processa mensagens livres (conversa√ß√£o natural)"""
        user = update.effective_user
        if not user or not update.message or not update.message.text:
            return ConversationHandler.END

        mensagem = update.message.text

        # Registrar usu√°rio e atividade
        monitoring.register_user(
            user_id=user.id,
            username=user.username or "",
            first_name=user.first_name or "",
            last_name=user.last_name or "",
        )
        monitoring.register_activity(user.id, "message", mensagem)

        try:
            # Gerar resposta com contexto
            resposta = await self.groq.generate_response(
                user_message=mensagem, system_prompt=SYSTEM_PROMPT
            )

            await update.message.reply_text(
                resposta,
                parse_mode="Markdown",
            )

        except Exception as e:
            logger.error(f"Erro na mensagem livre: {e}")
            await update.message.reply_text(
                "Desculpa, tive um problema ao processar a tua mensagem. "
                "Podes tentar de novo? üòä"
            )

        return ConversationHandler.END

    def get_conversation_handler(self) -> ConversationHandler:
        """Retorna o ConversationHandler configurado"""

        # Estados para as 20 perguntas
        states = {}

        # Cada pergunta tem seu estado
        for i in range(20):
            states[PERGUNTA_1 + i] = [
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.processar_resposta)
            ]

        # Estado para aguardar sugest√£o
        states[AGUARDANDO_SUGESTAO] = [
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.processar_sugestao)
        ]

        return ConversationHandler(
            entry_points=[
                CommandHandler("simular", self.simular),
                CommandHandler("sugestoes", self.sugestoes),
            ],
            states=states,
            fallbacks=[
                CommandHandler("cancel", self.cancelar),
                CommandHandler("reset", self.reset),
            ],
            per_user=True,
            per_chat=True,
        )


def create_application():
    """Cria e configura a aplica√ß√£o do bot IRS"""
    from config import TELEGRAM_BOT_TOKEN

    # Criar aplica√ß√£o
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Criar handler principal
    bot = IRSBotHandler()

    # Registrar handlers
    # 1. Comandos principais (fora da conversa√ß√£o)
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("calcular", bot.calcular_rapido))
    application.add_handler(CommandHandler("deducoes", bot.deducoes))
    application.add_handler(CommandHandler("contato", bot.contato))
    application.add_handler(CommandHandler("ajuda", bot.ajuda))
    application.add_handler(CommandHandler("reset", bot.reset))
    application.add_handler(CommandHandler("stats", bot.stats))
    application.add_handler(
        CommandHandler("showcase_detalhado", bot.showcase_detalhado)
    )

    # 2. Conversation handler para simula√ß√£o e sugest√µes
    application.add_handler(bot.get_conversation_handler())

    # 3. Handler para mensagens livres (deve ser √∫ltimo)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, bot.mensagem_livre)
    )

    logger.info(
        "‚úÖ Bot IRS Portugal configurado com Marinete e sistema de monitoramento!"
    )

    return application


if __name__ == "__main__":
    # Teste direto
    app = create_application()
    print("ü§ñ Bot IRS Portugal - Marinete iniciado!")
    app.run_polling()
